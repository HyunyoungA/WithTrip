/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-07-07 00:41:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class kakaoMemberLogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1655617123373L));
    _jspx_dependants.put("jar:file:/C:/WithTrip/WithTrip/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script src=\"resources/js6/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>WITHTRIP :: 함께라서 좋은 여행</title>\r\n");
      out.write("<style>\r\n");
      out.write("	html,\r\n");
      out.write("	body {\r\n");
      out.write("/* 		background-image:url(\"13.jpg\"); */\r\n");
      out.write("		background-color: #BAD5EA;\r\n");
      out.write("		font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("	    margin: 0;\r\n");
      out.write("	    padding: 0;\r\n");
      out.write("\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	body {\r\n");
      out.write("	    width: 100vw;\r\n");
      out.write("	    height: 100vh;\r\n");
      out.write("	    font-family: 'Open sans';\r\n");
      out.write("	    box-sizing: border-box;\r\n");
      out.write("	    display: flex;\r\n");
      out.write("	    flex-direction: column;\r\n");
      out.write("	    justify-content: center;\r\n");
      out.write("	    align-items: center;\r\n");
      out.write("/* 	    background: rgba(57, 50, 173, 1) */\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	body>* {\r\n");
      out.write("	    margin: 0;\r\n");
      out.write("	    padding: 0;\r\n");
      out.write("	    box-sizing: inherit;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.wrapper {\r\n");
      out.write("	    width: 700px;\r\n");
      out.write("	    background: #FFF;\r\n");
      out.write("	    border-radius: 10px;\r\n");
      out.write("	    box-shadow: 0 25px 70px rgba(0, 0, 0, .05);\r\n");
      out.write("	    overflow: hidden;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	h2.title {\r\n");
      out.write("	    padding: 15px 0;\r\n");
      out.write("	    margin-left: 25px;\r\n");
      out.write("	    font-weight: normal;\r\n");
      out.write("	    color: black;\r\n");
      out.write("	    text-align: center;\r\n");
      out.write("	    margin: auto;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.form {\r\n");
      out.write("	    width: 700px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.myform {\r\n");
      out.write("	    background: white;\r\n");
      out.write("	    display: grid;\r\n");
      out.write("/* 	    grid-template-columns: 1fr 1fr; */\r\n");
      out.write("	    grid-gap: 15px;\r\n");
      out.write("	    border-radius: 8px;\r\n");
      out.write("	\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.myform label {\r\n");
      out.write("	    display: block;\r\n");
      out.write("	    color: #A8AAC5;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("/* 	    font-size: .5rem; */\r\n");
      out.write("	    margin-bottom: 7px;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	.full-width {\r\n");
      out.write("	    grid-column: -1 / 1\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.button {\r\n");
      out.write("	    grid-column: -1 / 1;\r\n");
      out.write("/* 	    display: flex; */\r\n");
      out.write("		padding:10px;\r\n");
      out.write("	    justify-content: center;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.button button {\r\n");
      out.write("	    border: 0;\r\n");
      out.write("	    outline: 0;\r\n");
      out.write("	    width: 180px;\r\n");
      out.write("	    height: 40px;\r\n");
      out.write("	    border-radius: 50px;\r\n");
      out.write("	    color: #FFF;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("	    font-size: .9rem;\r\n");
      out.write("	    cursor: pointer;\r\n");
      out.write("/* 	    background: linear-gradient(356deg, rgba(57, 50, 173, 1) 0%, rgba(87, 50, 173, 1) 100%); */\r\n");
      out.write("		background-color: #6495ED;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.button button:hover {\r\n");
      out.write("		background-color: black;\r\n");
      out.write("/* 	    background: rgba(57, 50, 173, 1); */\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.p {\r\n");
      out.write("	margin-top: 30px;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	font-family: 'Raleway', sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".p input {\r\n");
      out.write("	padding-bottom: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".p label {\r\n");
      out.write("	margin-bottom: 0;	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".p button {\r\n");
      out.write("	width: 296px;\r\n");
      out.write("	margin-top: 0;\r\n");
      out.write("}\r\n");
      out.write("	/*추가*/      \r\n");
      out.write("   \r\n");
      out.write("p { margin:20px auto 0; } \r\n");
      out.write("/* form과 fieldset은 선택자로 사용하지 않는다. */\r\n");
      out.write("\r\n");
      out.write("p { \r\n");
      out.write("	position:relative; \r\n");
      out.write("	width:50%; \r\n");
      out.write("	height:50px;\r\n");
      out.write("} /* 기본세팅 */\r\n");
      out.write("\r\n");
      out.write("p input { \r\n");
      out.write("	box-sizing:border-box; \r\n");
      out.write("	padding:10px 0 0; \r\n");
      out.write("	width:100%; \r\n");
      out.write("	height:100%; \r\n");
      out.write("	border:0 none; \r\n");
      out.write("	color:#595f63; \r\n");
      out.write("	outline:none; \r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	p label { \r\n");
      out.write("		position:absolute; \r\n");
      out.write("		left:0%; \r\n");
      out.write("		bottom:0; \r\n");
      out.write("		width:100%; \r\n");
      out.write("		height:100%; \r\n");
      out.write("		border-bottom:1px solid #000; \r\n");
      out.write("		text-align:left; \r\n");
      out.write("		pointer-events:none; \r\n");
      out.write("	}\r\n");
      out.write("	p label:after { \r\n");
      out.write("		content:\"\"; \r\n");
      out.write("		position:absolute; \r\n");
      out.write("		left:0; \r\n");
      out.write("		bottom:-1px; \r\n");
      out.write("		width:0; \r\n");
      out.write("		height:100%; \r\n");
      out.write("		border-bottom:1px solid #6495ED; \r\n");
      out.write("		transition:all .5s ease;  /* 파란색 가로줄 */\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("p label span { \r\n");
      out.write("	position:absolute; \r\n");
      out.write("	left:0; \r\n");
      out.write("	bottom:2px; \r\n");
      out.write("	transition:all .5s ease; \r\n");
      out.write("	font-size: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("p input:focus + label span, \r\n");
      out.write("p input:valid + label span { \r\n");
      out.write("	transform:translateY(-150%); \r\n");
      out.write("	font-size:10px; \r\n");
      out.write("	color:#8fa1c7; }  \r\n");
      out.write("	/* input에 글을 입력하고 포커스가 지나간 상태에서 제어하려면 valid 선택자를 써야한다. */\r\n");
      out.write("	\r\n");
      out.write("/* 포커스 될 때 label span(name)이 위로 올라감 */\r\n");
      out.write("p input:focus + label::after,\r\n");
      out.write("p input:valid + label::after { \r\n");
      out.write("	width:100%; \r\n");
      out.write("	transform:translateX(0); \r\n");
      out.write("	} \r\n");
      out.write("input, button {\r\n");
      out.write("  border: none;\r\n");
      out.write("  outline: none;\r\n");
      out.write("  background: none;\r\n");
      out.write("/*   font-family: \"Open Sans\", Helvetica, Arial, sans-serif; */\r\n");
      out.write("}\r\n");
      out.write("input {\r\n");
      out.write("  display: block;\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  margin-top: 5px;\r\n");
      out.write("  padding-bottom: 5px;\r\n");
      out.write("  font-size: 16px;\r\n");
      out.write("  border-bottom: 1px solid rgba(0, 0, 0, 0.4);\r\n");
      out.write("  text-align: center;\r\n");
      out.write("}\r\n");
      out.write(".img__btn span.m--in {\r\n");
      out.write("  transform: translateY(-72px);\r\n");
      out.write("}\r\n");
      out.write(".cont.s--signup .img__btn span.m--in {\r\n");
      out.write("  transform: translateY(0);\r\n");
      out.write("}\r\n");
      out.write(".cont.s--signup .img__btn span.m--up {\r\n");
      out.write("  transform: translateY(72px);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("	 <div class=\"wrapper\" style=\"overflow:auto;\">\r\n");
      out.write("     <div class=\"form\">\r\n");
      out.write("     <br>\r\n");
      out.write("         <h2 class=\"title\">정보 입력</h2>\r\n");
      out.write("         <form action=\"kakaoUserInfo.me\" class=\"myform\" method=\"post\" style=\"text-align: center;\" onsubmit=\"return insertValidate();\">\r\n");
      out.write("\r\n");
      out.write("            	<input type=\"hidden\" name=\"email\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ userInfo.email }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly>\r\n");
      out.write("\r\n");
      out.write("			<p class=\"p\">\r\n");
      out.write("              <input type=\"text\" name=\"userName\" id=\"name\" maxlength=\"25\" autocomplete=\"off\"  required>\r\n");
      out.write("              <label><span>NAME</span></label>\r\n");
      out.write("              <span style=\"text-align: center; font-size: small;\" id=\"nameResult\"></span>\r\n");
      out.write("            </p>\r\n");
      out.write("\r\n");
      out.write("			<p class=\"p\">\r\n");
      out.write("              <input type=\"text\" name=\"nickName\" id=\"nickName\" maxlength=\"25\" autocomplete=\"off\" required >\r\n");
      out.write("              <label><span>NICKNAME</span></label>\r\n");
      out.write("              <span style=\"text-align: center;  font-size: small;\" id=\"nickResult\"></span>\r\n");
      out.write("            </p>\r\n");
      out.write("			\r\n");
      out.write("			<p class=\"p\">\r\n");
      out.write("              <input type=\"text\" name=\"phone\" id=\"phone\" maxlength=\"25\" autocomplete=\"off\" onkeyup=\"addHypen(this);\" required >\r\n");
      out.write("              <label><span>PHONE</span></label>\r\n");
      out.write("              <span style=\"text-align: center; font-size: small;\" id=\"phResult\"></span>\r\n");
      out.write("            </p>\r\n");
      out.write("	\r\n");
      out.write("			<p class=\"p\">\r\n");
      out.write("              <input type=\"text\" name=\"address\" id=\"address_kakao\" maxlength=\"25\" autocomplete=\"off\"  placeholder=\"click!\" required>\r\n");
      out.write("              <label><span>ADDRESS</span></label>\r\n");
      out.write("            </p>\r\n");
      out.write("            \r\n");
      out.write("            <p class=\"p\">\r\n");
      out.write("              <input type=\"text\" name=\"address_detail\" id=\"address_detail\" maxlength=\"25\" autocomplete=\"off\" required>\r\n");
      out.write("              <label><span>ADDRESS DETAIL</span></label>\r\n");
      out.write("            </p>\r\n");
      out.write("            \r\n");
      out.write("            <br>\r\n");
      out.write("             <div class=\"button\">\r\n");
      out.write("                 <button type=submit id=\"register\">저장</button>\r\n");
      out.write("                 <button type=button id=\"register1\" onclick=\"cancel();\">취소</button>\r\n");
      out.write("             </div>\r\n");
      out.write("             <br>\r\n");
      out.write("        \r\n");
      out.write("         </form>\r\n");
      out.write("     </div>\r\n");
      out.write(" </div>\r\n");
      out.write(" <script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("	   window.onload = function(){\r\n");
      out.write("	       document.getElementById(\"address_kakao\").addEventListener(\"click\", function(){ //주소입력칸을 클릭하면\r\n");
      out.write("	           //카카오 지도 발생\r\n");
      out.write("	           new daum.Postcode({\r\n");
      out.write("	               oncomplete: function(data) { //선택시 입력값 세팅\r\n");
      out.write("	                   document.getElementById(\"address_kakao\").value = data.address; // 주소 넣기\r\n");
      out.write("	                   document.querySelector(\"input[name=address_detail]\").focus(); //상세입력 포커싱\r\n");
      out.write("	               }\r\n");
      out.write("	           }).open();\r\n");
      out.write("	       });\r\n");
      out.write("	   }\r\n");
      out.write("	\r\n");
      out.write("	   function cancel(){\r\n");
      out.write("		   location.href = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/home.do';\r\n");
      out.write("		   \r\n");
      out.write("		   \r\n");
      out.write("	   }\r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("	   /* 정규식 (한글, 영문, 숫자만 가능하며 2-10자리 가능) */\r\n");
      out.write("	   $('#nickName').on('keyup', function(){\r\n");
      out.write("	      var nickname = $('#nickName').val().trim()\r\n");
      out.write("	      if (!/^([a-zA-Z0-9ㄱ-ㅎ|ㅏ-ㅣ|가-힣]).{4,10}$/.test(nickname) && nickname != (\"\")){\r\n");
      out.write("	         $('#nickResult').text('한글,영어,숫자 조합으로 10자리 이내').css('color', 'orangered');\r\n");
      out.write("	         return false;\r\n");
      out.write("	      }else{\r\n");
      out.write("	         $('#nickResult').text('');\r\n");
      out.write("	      }\r\n");
      out.write("	   });\r\n");
      out.write("	   \r\n");
      out.write("	      \r\n");
      out.write("	   /* 닉네임(중복확인) */\r\n");
      out.write("	   var isUserble = false;   // id 중복 시 false, 사용 가능 시 true\r\n");
      out.write("	   var isNiChecked = false;\r\n");
      out.write("	   $('#nickName').on('keyup', function(){\r\n");
      out.write("	      var nickName = $('#nickName').val().trim()\r\n");
      out.write("	            $.ajax({\r\n");
      out.write("	               url: 'dupNick.me',\r\n");
      out.write("	               data: {nickName:nickName},\r\n");
      out.write("	               success: function(data){\r\n");
      out.write("	                  console.log(data);\r\n");
      out.write("	                  if(data == \"0\"){\r\n");
      out.write("	                	  \r\n");
      out.write("	                  isUsable = true;\r\n");
      out.write("	                  isNiChecked = true;\r\n");
      out.write("	                  \r\n");
      out.write("	               } else if(data == \"1\"){\r\n");
      out.write("	                  $('#nickResult').text(\"이미 사용중인 '닉네임'입니다.\").css('color', \"orangered\");\r\n");
      out.write("	                  isUsable = false;\r\n");
      out.write("	                  isNiCheked = false;\r\n");
      out.write("	               }\r\n");
      out.write("	            },\r\n");
      out.write("	            error: function(data){\r\n");
      out.write("	               console.log(data);\r\n");
      out.write("	            }   \r\n");
      out.write("	         });\r\n");
      out.write("	   });\r\n");
      out.write("	   \r\n");
      out.write("  		function insertValidate(){\r\n");
      out.write("   			if(isUsable && isNiChecked){\r\n");
      out.write("   				\r\n");
      out.write("   				return true;\r\n");
      out.write("   			} else {\r\n");
      out.write("   				\r\n");
      out.write("   				$('#nickResult').text('닉네임 중복확인을 해주세요.');\r\n");
      out.write("   				return false;\r\n");
      out.write("   			}\r\n");
      out.write("   			\r\n");
      out.write("   		}\r\n");
      out.write("  		\r\n");
      out.write("  		\r\n");
      out.write("  		\r\n");
      out.write("  	// < 이름 >\r\n");
      out.write("  		/* 정규식(한글,영어만 사용가능) */\r\n");
      out.write("  		$('#name').on('change paste keyup', function(){\r\n");
      out.write("  			var userName = $('#name').val().trim();\r\n");
      out.write("  			var regex = /^[가-힣a-zA-Z]+$/;\r\n");
      out.write("  			\r\n");
      out.write("  			if(regex.test(userName) || userName ==('')) {\r\n");
      out.write("  				$('#nameResult').text('');\r\n");
      out.write("  				// $(this).val('');\r\n");
      out.write("  				$(this).focus();\r\n");
      out.write("  		\r\n");
      out.write("  				return false;\r\n");
      out.write("  			} else {\r\n");
      out.write("  				$('#nameResult').text('이름을 확인해주세요.').css('color' , 'orangered');\r\n");
      out.write("  			}\r\n");
      out.write("  		});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  	// < 연락처 > \r\n");
      out.write("  		/* 정규식(010-xxxx-xxxx 양식 '-' 사용가능) */\r\n");
      out.write("  		$(\"#phone\").on('change paste keyup', function(){\r\n");
      out.write("  			var phone = $('#phone').val().trim();\r\n");
      out.write("  			var regPhone = /^01([0|1|6|7|8|9])-([0-9]{3,4})-([0-9]{4})$/;\r\n");
      out.write("  			if (regPhone.test(phone) === true) {\r\n");
      out.write("  				$('#phResult').text('사용 가능한 번호입니다.').css('color', 'green');\r\n");
      out.write("  			}else {\r\n");
      out.write("  				$('#phResult').text(\"연락처를 확인해주세요.\").css('color', \"orangered\");\r\n");
      out.write("  				\r\n");
      out.write("  				return false;\r\n");
      out.write("  			}\r\n");
      out.write("  		});\r\n");
      out.write("  		\r\n");
      out.write("\r\n");
      out.write("  	 	/* 연락처 하이폰(-) 자동생성 */			\r\n");
      out.write("  	   function addHypen(obj) {\r\n");
      out.write("  	          var number = obj.value.replace(/[^0-9]/g, \"\");\r\n");
      out.write("  	          var phone = \"\";\r\n");
      out.write("  	          \r\n");
      out.write("  	         if(number.length < 4) {\r\n");
      out.write("  	            return number;\r\n");
      out.write("  	        } else if(number.length < 7) {\r\n");
      out.write("  	            phone += number.substr(0, 3);\r\n");
      out.write("  	            phone += \"-\";\r\n");
      out.write("  	            phone += number.substr(3);\r\n");
      out.write("  	        } else if(number.length < 11) {\r\n");
      out.write("  	            phone += number.substr(0, 3);\r\n");
      out.write("  	            phone += \"-\";\r\n");
      out.write("  	            phone += number.substr(3, 3);\r\n");
      out.write("  	            phone += \"-\";\r\n");
      out.write("  	            phone += number.substr(6);\r\n");
      out.write("  	        } else {\r\n");
      out.write("  	            phone += number.substr(0, 3);\r\n");
      out.write("  	            phone += \"-\";\r\n");
      out.write("  	            phone += number.substr(3, 4);\r\n");
      out.write("  	            phone += \"-\";\r\n");
      out.write("  	            phone += number.substr(7);\r\n");
      out.write("  	        }\r\n");
      out.write("  	        obj.value = phone;\r\n");
      out.write("  	    }\r\n");
      out.write("  					\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
