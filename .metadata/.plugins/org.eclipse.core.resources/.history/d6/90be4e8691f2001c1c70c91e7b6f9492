package com.withtrip.WithTrip.trip.controller;

import java.io.File;
import java.io.IOException;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Enumeration;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartRequest;
import org.springframework.web.servlet.ModelAndView;

import com.withtrip.WithTrip.common.Attachment;
import com.withtrip.WithTrip.common.Pagination;
import com.withtrip.WithTrip.trip.model.service.TripService;
import com.withtrip.WithTrip.trip.model.vo.PageInfo;
import com.withtrip.WithTrip.trip.model.vo.TripBoard;

@Controller
public class TripController {
	
	@Autowired
	private TripService tService;
	
	//동행 리스트 조회
	@RequestMapping("tlist.to")
	public ModelAndView tripList(@RequestParam(value="page", required=false) Integer page, ModelAndView mv) {
		//페이징처리
		int currentPage = 1;
		if(page != null) {
			currentPage = page;
		}
		
		int listCount = tService.getListCount();
	
		//페이지네이션
		PageInfo pi = Pagination.getPageInfo(currentPage, listCount);
		
		ArrayList<TripBoard> list = tService.getBoardList(pi);
		System.out.println("페이지네이션"+list);
		ArrayList<Attachment> Flist = tService.getFileList(pi);
		System.out.println("파일리스트"+Flist);
		if(list != null) {
			mv.addObject("list", list);
			mv.addObject("pi", pi);
			mv.setViewName("tripList");
		}
		if(Flist != null) {
			mv.addObject("Flist", Flist);
			mv.addObject("pi", pi);
			mv.setViewName("tripList");
			
		}
		
		return mv;
	}
	
	//동행 글 상세보기
	@RequestMapping("tripDetailView.to")
	public String tripDetailView() {
	    return "tripDetail";
	}
	   
	//동행 글작성 뷰이동
	@RequestMapping("tripWriteView.to")
	public String tripWriteView() {
	    return "tripWriteForm";
	}
	
	//동행 글작성
	@RequestMapping("tinsert.to")
	public String insertTrip(@ModelAttribute TripBoard t,@ModelAttribute Attachment a,
							 @RequestParam("uploadFile") MultipartFile uploadFile, 
							 HttpServletRequest request) {
		System.out.println("t:"+t);
		System.out.println("uploadFile:"+uploadFile);
		System.out.println("a:"+a);
		if(uploadFile != null && !uploadFile.isEmpty()) {
			String renameFileName = saveFile(a, uploadFile, request);
			
			a.setOriginName(uploadFile.getOriginalFilename());
			a.setChangeName(renameFileName);
			
		}
		int result = tService.insertBoard(t);
		int result2 = tService.insertFile(a);
		
		System.out.println("t2:"+t);
		System.out.println("t2:"+a);
		if(result > 0 && result > 0) {
			return "redirect:tlist.to";
		} else {
			return "errorPage";
		}
		
	}
	
	//파일 저장
	public String saveFile(@ModelAttribute Attachment a, MultipartFile file, HttpServletRequest request) {
		String root = request.getSession().getServletContext().getRealPath("resources");
		String savePath = root + "\\tuploadFiles";
		
		File folder = new File(savePath);
		if(!folder.exists()) {
			folder.mkdirs();
		}
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
		String originFileName = file.getOriginalFilename();
		String renameFileName = sdf.format(new Date(System.currentTimeMillis())) + originFileName.substring(originFileName.lastIndexOf("."));
		
		String renamePath = folder + "\\" + renameFileName;
		a.setFilePath(savePath);
		try {//저장소에 새로만든 이름으로 저장
			file.transferTo(new File(renamePath));
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return renameFileName;
		
	}
	   

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
